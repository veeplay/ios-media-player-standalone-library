<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/APSMediaEvent.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/APSMediaEvent</TokenIdentifier>
			<Abstract type="html">The APSMediaEvent class describes a container that developers can use to instruct the player to run specific blocks of code at specific moments of time. Objects extending this class and implementing the corresponding APSMediaEventProtocol protocol can be added to the player&apos;s main queue and can also be attached to a specific APSMediaUnit object, for runtime triggering.</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
            
			
			<NodeRef refid="3"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaEvent/setStartPoint:</TokenIdentifier>
			<Abstract type="html">Sets the starting time point of the event.</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>- (void)setStartPoint:(NSString *)startPoint</Declaration>
			<Parameters>
				<Parameter>
					<Name>startPoint</Name>
					<Abstract type="html">A string format describing the time point when the player needs to trigger the event. Possible values are seconds (e.g.: @&quot;60&quot;) or a percentage relative to the total duration of the parent clip (e.g.: @&quot;50%&quot;).</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setStartPoint:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaEvent/setEndPoint:</TokenIdentifier>
			<Abstract type="html">Sets the ending time point of the event.</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>- (void)setEndPoint:(NSString *)endPoint</Declaration>
			<Parameters>
				<Parameter>
					<Name>endPoint</Name>
					<Abstract type="html">A string format describing the time point when the player needs to unload the event. Possible values are seconds (e.g.: @&quot;60&quot;) or a percentage relative to the total duration of the parent clip (e.g.: @&quot;50%&quot;).</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setEndPoint:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaEvent/startPoint</TokenIdentifier>
			<Abstract type="html">The time interval (in seconds) when the player needs to trigger the event.</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>- (NSTimeInterval)startPoint</Declaration>
			
			<ReturnValue><Abstract type="html">The initial time interval.</Abstract></ReturnValue>
			<Anchor>//api/name/startPoint</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaEvent/endPoint</TokenIdentifier>
			<Abstract type="html">The playback time (in seconds) when the player needs to unload the event. Defaults to -1 for events that should unload right after triggering.</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>- (NSTimeInterval)endPoint</Declaration>
			
			<ReturnValue><Abstract type="html">The final time interval.</Abstract></ReturnValue>
			<Anchor>//api/name/endPoint</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaEvent/setRepeatAfter:</TokenIdentifier>
			<Abstract type="html">If this parameter is greater than 0, then the event will be retriggered by the media player after the specific time interval (in seconds).</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSTimeInterval repeatAfter</Declaration>
			
			
			<Anchor>//api/name/repeatAfter</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaEvent/repeatAfter</TokenIdentifier>
			<Abstract type="html">If this parameter is greater than 0, then the event will be retriggered by the media player after the specific time interval (in seconds).</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSTimeInterval repeatAfter</Declaration>
			
			
			<Anchor>//api/name/repeatAfter</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSMediaEvent/repeatAfter</TokenIdentifier>
			<Abstract type="html">If this parameter is greater than 0, then the event will be retriggered by the media player after the specific time interval (in seconds).</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSTimeInterval repeatAfter</Declaration>
			
			
			<Anchor>//api/name/repeatAfter</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaEvent/incrementStartAndEndPointsWithInterval:</TokenIdentifier>
			<Abstract type="html">Shifts air-time for an event by a defined amount of time.</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>- (void)incrementStartAndEndPointsWithInterval:(NSTimeInterval)duration</Declaration>
			<Parameters>
				<Parameter>
					<Name>duration</Name>
					<Abstract type="html">Shift duration in seconds.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/incrementStartAndEndPointsWithInterval:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaEvent/adjustRelativeToDuration:</TokenIdentifier>
			<Abstract type="html">Translates percentual values set via setStartPoint and setEndPoint to actual time intervals in seconds, relative to a specified total duration.</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>- (void)adjustRelativeToDuration:(NSTimeInterval)duration</Declaration>
			<Parameters>
				<Parameter>
					<Name>duration</Name>
					<Abstract type="html">The total duration.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/adjustRelativeToDuration:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaEvent/trigger</TokenIdentifier>
			<Abstract type="html">Call this to trigger the event.</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>- (void)trigger</Declaration>
			
			
			<Anchor>//api/name/trigger</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaEvent/preload</TokenIdentifier>
			<Abstract type="html">Call this to preload the event.</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>- (void)preload</Declaration>
			
			
			<Anchor>//api/name/preload</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaEvent/setPreloadInterval:</TokenIdentifier>
			<Abstract type="html">Defines the number of seconds before the scheduled start point when the event should receive the [APSMediaEventProtocol preload] message (if the method is implemented).</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSTimeInterval preloadInterval</Declaration>
			
			
			<Anchor>//api/name/preloadInterval</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaEvent/preloadInterval</TokenIdentifier>
			<Abstract type="html">Defines the number of seconds before the scheduled start point when the event should receive the [APSMediaEventProtocol preload] message (if the method is implemented).</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSTimeInterval preloadInterval</Declaration>
			
			
			<Anchor>//api/name/preloadInterval</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSMediaEvent/preloadInterval</TokenIdentifier>
			<Abstract type="html">Defines the number of seconds before the scheduled start point when the event should receive the [APSMediaEventProtocol preload] message (if the method is implemented).</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSTimeInterval preloadInterval</Declaration>
			
			
			<Anchor>//api/name/preloadInterval</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaEvent/setTimeout:</TokenIdentifier>
			<Abstract type="html">Defines the maximum number of seconds the event is allowed to live once it has been pretriggered, without setting the loaded property to YES.</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSTimeInterval timeout</Declaration>
			
			
			<Anchor>//api/name/timeout</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaEvent/timeout</TokenIdentifier>
			<Abstract type="html">Defines the maximum number of seconds the event is allowed to live once it has been pretriggered, without setting the loaded property to YES.</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSTimeInterval timeout</Declaration>
			
			
			<Anchor>//api/name/timeout</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSMediaEvent/timeout</TokenIdentifier>
			<Abstract type="html">Defines the maximum number of seconds the event is allowed to live once it has been pretriggered, without setting the loaded property to YES.</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSTimeInterval timeout</Declaration>
			
			
			<Anchor>//api/name/timeout</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaEvent/setState:</TokenIdentifier>
			<Abstract type="html">The current lifecycle state of the event.</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>@property APSMediaEventState state</Declaration>
			
			
			<Anchor>//api/name/state</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaEvent/state</TokenIdentifier>
			<Abstract type="html">The current lifecycle state of the event.</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>@property APSMediaEventState state</Declaration>
			
			
			<Anchor>//api/name/state</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSMediaEvent/state</TokenIdentifier>
			<Abstract type="html">The current lifecycle state of the event.</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>@property APSMediaEventState state</Declaration>
			
			
			<Anchor>//api/name/state</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaEvent/setPreloadPoint:</TokenIdentifier>
			<Abstract type="html">Set by the player to the current playback time in seconds, after the current event begins preloading. Defaults to -1 if the event did not start preloading.</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>@property NSTimeInterval preloadPoint</Declaration>
			
			
			<Anchor>//api/name/preloadPoint</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaEvent/preloadPoint</TokenIdentifier>
			<Abstract type="html">Set by the player to the current playback time in seconds, after the current event begins preloading. Defaults to -1 if the event did not start preloading.</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>@property NSTimeInterval preloadPoint</Declaration>
			
			
			<Anchor>//api/name/preloadPoint</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSMediaEvent/preloadPoint</TokenIdentifier>
			<Abstract type="html">Set by the player to the current playback time in seconds, after the current event begins preloading. Defaults to -1 if the event did not start preloading.</Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>@property NSTimeInterval preloadPoint</Declaration>
			
			
			<Anchor>//api/name/preloadPoint</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaEvent/setDynamicPosition:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>@property BOOL dynamicPosition</Declaration>
			
			
			<Anchor>//api/name/dynamicPosition</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaEvent/dynamicPosition</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>@property BOOL dynamicPosition</Declaration>
			
			
			<Anchor>//api/name/dynamicPosition</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSMediaEvent/dynamicPosition</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>APSMediaEvent.h</DeclaredIn>
			
			<Declaration>@property BOOL dynamicPosition</Declaration>
			
			
			<Anchor>//api/name/dynamicPosition</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
        
	</File>
</Tokens>