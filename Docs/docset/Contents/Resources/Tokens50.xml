<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Protocols/APSMediaPlayerOverlayControllerProtocol.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intf/APSMediaPlayerOverlayControllerProtocol</TokenIdentifier>
			<Abstract type="html">The APSMediaPlayerOverlayController defines all the methods that a UIViewController subclass must or can implement to be able to register as an overlay controller with the player. This protocol extends the KRAdapter protocol, so objects should also define a unique string type to register under.</Abstract>
			<DeclaredIn>APSMediaPlayerOverlayController.h</DeclaredIn>
            
			
			<NodeRef refid="50"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/APSMediaPlayerOverlayControllerProtocol/load</TokenIdentifier>
			<Abstract type="html">This method is invoked by the player when first diplaying the overlay controller object.</Abstract>
			<DeclaredIn>APSMediaPlayerOverlayController.h</DeclaredIn>
			
			<Declaration>- (void)load</Declaration>
			
			
			<Anchor>//api/name/load</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/APSMediaPlayerOverlayControllerProtocol/preload</TokenIdentifier>
			<Abstract type="html">This method is invoked by the player on a background thread, before the overlay start point, as set by the [APSMediaEvent preTriggerInterval] property.</Abstract>
			<DeclaredIn>APSMediaPlayerOverlayController.h</DeclaredIn>
			
			<Declaration>- (void)preload</Declaration>
			
			
			<Anchor>//api/name/preload</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/APSMediaPlayerOverlayControllerProtocol/update</TokenIdentifier>
			<Abstract type="html">This method is called whenever the playback state of the player is changed (e.g. current playback time changes, playback state changes etc.). If the overlay controller needs to update its interface as a result of these changes, the updates should be performed in this method.</Abstract>
			<DeclaredIn>APSMediaPlayerOverlayController.h</DeclaredIn>
			
			<Declaration>- (void)update</Declaration>
			
			
			<Anchor>//api/name/update</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/APSMediaPlayerOverlayControllerProtocol/overlayWillBeRemoved</TokenIdentifier>
			<Abstract type="html">This method is invoked by the player, before the overlay controller&apos;s view is removed from the player surface. Any overlay cleanup code should be performed in this method.</Abstract>
			<DeclaredIn>APSMediaPlayerOverlayController.h</DeclaredIn>
			
			<Declaration>- (void)overlayWillBeRemoved</Declaration>
			
			
			<Anchor>//api/name/overlayWillBeRemoved</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/APSMediaPlayerOverlayControllerProtocol/didEnterFullscreen</TokenIdentifier>
			<Abstract type="html">This method is invoked by the player, when fullscreen mode is enabled.</Abstract>
			<DeclaredIn>APSMediaPlayerOverlayController.h</DeclaredIn>
			
			<Declaration>- (void)didEnterFullscreen</Declaration>
			
			
			<Anchor>//api/name/didEnterFullscreen</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/APSMediaPlayerOverlayControllerProtocol/didExitFullscreen</TokenIdentifier>
			<Abstract type="html">This method is invoked by the player, when fullscreen mode is disabled.</Abstract>
			<DeclaredIn>APSMediaPlayerOverlayController.h</DeclaredIn>
			
			<Declaration>- (void)didExitFullscreen</Declaration>
			
			
			<Anchor>//api/name/didExitFullscreen</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/APSMediaPlayerOverlayControllerProtocol/currentPlaybackTime</TokenIdentifier>
			<Abstract type="html">Allows an overlay controller to return a current playback time in place of the parent APSMediaUnit object, if the url property of that object is nil.</Abstract>
			<DeclaredIn>APSMediaPlayerOverlayController.h</DeclaredIn>
			
			<Declaration>- (NSTimeInterval)currentPlaybackTime</Declaration>
			
			
			<Anchor>//api/name/currentPlaybackTime</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/APSMediaPlayerOverlayControllerProtocol/playableDuration</TokenIdentifier>
			<Abstract type="html">Allows an overlay controller to return a total playable (buffered) time in place of the parent APSMediaUnit object, if the url property of that object is nil.</Abstract>
			<DeclaredIn>APSMediaPlayerOverlayController.h</DeclaredIn>
			
			<Declaration>- (NSTimeInterval)playableDuration</Declaration>
			
			
			<Anchor>//api/name/playableDuration</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/APSMediaPlayerOverlayControllerProtocol/setCurrentPlaybackTime:</TokenIdentifier>
			<Abstract type="html">Allows an overlay that handles media playback in place of the parent unit to internally set the current playback time.</Abstract>
			<DeclaredIn>APSMediaPlayerOverlayController.h</DeclaredIn>
			
			<Declaration>- (void)setCurrentPlaybackTime:(NSTimeInterval)playbackTime</Declaration>
			<Parameters>
				<Parameter>
					<Name>playbackTime</Name>
					<Abstract type="html">The required playback time to seek to, in seconds.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setCurrentPlaybackTime:</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/APSMediaPlayerOverlayControllerProtocol/duration</TokenIdentifier>
			<Abstract type="html">Allows an overlay controller to return a total playback duration in place of the parent APSMediaUnit object, if the url property of that object is nil.</Abstract>
			<DeclaredIn>APSMediaPlayerOverlayController.h</DeclaredIn>
			
			<Declaration>- (NSTimeInterval)duration</Declaration>
			
			
			<Anchor>//api/name/duration</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/APSMediaPlayerOverlayControllerProtocol/playbackState</TokenIdentifier>
			<Abstract type="html">Allows an overlay controller to return a playback state in place of the parent APSMediaUnit object, if the url property of that object is nil. See Apple&apos;s documentation for more details about MPMoviePlaybackState.</Abstract>
			<DeclaredIn>APSMediaPlayerOverlayController.h</DeclaredIn>
			
			<Declaration>- (MPMoviePlaybackState)playbackState</Declaration>
			
			
			<Anchor>//api/name/playbackState</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/APSMediaPlayerOverlayControllerProtocol/loadState</TokenIdentifier>
			<Abstract type="html">Allows an overlay controller to return a load state in place of the parent APSMediaUnit object, if the url property of that object is nil. See Apple&apos;s documentation for more details about MPMovieLoadState.</Abstract>
			<DeclaredIn>APSMediaPlayerOverlayController.h</DeclaredIn>
			
			<Declaration>- (MPMovieLoadState)loadState</Declaration>
			
			
			<Anchor>//api/name/loadState</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/APSMediaPlayerOverlayControllerProtocol/movieSourceType</TokenIdentifier>
			<Abstract type="html">Allows an overlay controller to return a media source type in place of the parent APSMediaUnit object, if the url property of that object is nil. See Apple&apos;s documentation for more details about MPMovieSourceType.</Abstract>
			<DeclaredIn>APSMediaPlayerOverlayController.h</DeclaredIn>
			
			<Declaration>- (MPMovieSourceType)movieSourceType</Declaration>
			
			
			<Anchor>//api/name/movieSourceType</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/APSMediaPlayerOverlayControllerProtocol/play</TokenIdentifier>
			<Abstract type="html">Allows an overlay that handles media playback in place of the parent unit to start playback.</Abstract>
			<DeclaredIn>APSMediaPlayerOverlayController.h</DeclaredIn>
			
			<Declaration>- (void)play</Declaration>
			
			
			<Anchor>//api/name/play</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/APSMediaPlayerOverlayControllerProtocol/stop</TokenIdentifier>
			<Abstract type="html">Allows an overlay that handles media playback in place of the parent unit to stop playback.</Abstract>
			<DeclaredIn>APSMediaPlayerOverlayController.h</DeclaredIn>
			
			<Declaration>- (void)stop</Declaration>
			
			
			<Anchor>//api/name/stop</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/APSMediaPlayerOverlayControllerProtocol/pause</TokenIdentifier>
			<Abstract type="html">Allows an overlay that handles media playback in place of the parent unit to pause playback.</Abstract>
			<DeclaredIn>APSMediaPlayerOverlayController.h</DeclaredIn>
			
			<Declaration>- (void)pause</Declaration>
			
			
			<Anchor>//api/name/pause</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/APSMediaPlayerOverlayControllerProtocol/thumbnailImageAtTime:</TokenIdentifier>
			<Abstract type="html">Allows an overlay that handles media playback in place of the parent unit to return a thumbnail image at a specific time interval from the managed video.</Abstract>
			<DeclaredIn>APSMediaPlayerOverlayController.h</DeclaredIn>
			
			<Declaration>- (UIImage *)thumbnailImageAtTime:(NSTimeInterval)time</Declaration>
			<Parameters>
				<Parameter>
					<Name>time</Name>
					<Abstract type="html">The time when the thumbnail should be taken from the video.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The resulting thumbnail.</Abstract></ReturnValue>
			<Anchor>//api/name/thumbnailImageAtTime:</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/APSMediaPlayerOverlayControllerProtocol/onWebviewDismiss</TokenIdentifier>
			<Abstract type="html">Allows an overlay controller to specify what action the player should take when it comes back into focus, after a modal in-app web browser was triggered and dismissed by user interaction.</Abstract>
			<DeclaredIn>APSMediaPlayerOverlayController.h</DeclaredIn>
			
			<Declaration>- (APSWebviewDismissedAction)onWebviewDismiss</Declaration>
			
			<ReturnValue><Abstract type="html">The desired action. See APSWebviewDismissedAction for more details.</Abstract></ReturnValue>
			<Anchor>//api/name/onWebviewDismiss</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
        
	</File>
</Tokens>