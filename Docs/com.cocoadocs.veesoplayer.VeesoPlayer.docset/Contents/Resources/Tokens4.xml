<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/APSMediaPlayer.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/APSMediaPlayer</TokenIdentifier>
			<Abstract type="html">The APSMediaPlayer handles playback and rendering of APSMediaUnits and APSMediaOverlays.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
            
			
			<NodeRef refid="4"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/APSMediaPlayer/sharedInstance</TokenIdentifier>
			<Abstract type="html">Returns the shared APSMediaPlayer instance, creating it if necessary.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>+ (instancetype)sharedInstance</Declaration>
			
			<ReturnValue><Abstract type="html">The shared APSMediaPlayer instance</Abstract></ReturnValue>
			<Anchor>//api/name/sharedInstance</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/setView:</TokenIdentifier>
			<Abstract type="html">The container UIView of the player.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) UIView *view</Declaration>
			
			
			<Anchor>//api/name/view</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/view</TokenIdentifier>
			<Abstract type="html">The container UIView of the player.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) UIView *view</Declaration>
			
			
			<Anchor>//api/name/view</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSMediaPlayer/view</TokenIdentifier>
			<Abstract type="html">The container UIView of the player.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) UIView *view</Declaration>
			
			
			<Anchor>//api/name/view</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/setFrame:</TokenIdentifier>
			<Abstract type="html">Call this method to set the player view frame.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)setFrame:(CGRect)frame</Declaration>
			<Parameters>
				<Parameter>
					<Name>frame</Name>
					<Abstract type="html">CGRect player view frame.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setFrame:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/playMediaUnits:</TokenIdentifier>
			<Abstract type="html">Sets and begins playback of an array of media units.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)playMediaUnits:(NSArray *)mediaUnits</Declaration>
			<Parameters>
				<Parameter>
					<Name>mediaUnits</Name>
					<Abstract type="html">An array of APSMediaUnit objects.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/playMediaUnits:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/insertMediaUnits:</TokenIdentifier>
			<Abstract type="html">Inserts new media units after the current one, in the current playlist.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)insertMediaUnits:(NSArray *)mediaUnits</Declaration>
			<Parameters>
				<Parameter>
					<Name>mediaUnits</Name>
					<Abstract type="html">An array of APSMediaUnit objects to be inserted into the playlist after the current unit.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/insertMediaUnits:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/replaceCurrentUnitWithUnits:</TokenIdentifier>
			<Abstract type="html">Replaces the currently running media unit with multiple other units. Playback of the new units is started automatically.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)replaceCurrentUnitWithUnits:(NSArray *)mediaUnits</Declaration>
			<Parameters>
				<Parameter>
					<Name>mediaUnits</Name>
					<Abstract type="html">An array of APSMediaUnit objects to be inserted into the playlist instead of the current unit.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/replaceCurrentUnitWithUnits:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/setMediaUnits:</TokenIdentifier>
			<Abstract type="html">Sets new units to the playlist, clearing any old ones.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)setMediaUnits:(NSArray *)mediaUnits</Declaration>
			<Parameters>
				<Parameter>
					<Name>mediaUnits</Name>
					<Abstract type="html">An array of APSMediaUnit objects to create a new playlist.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setMediaUnits:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/currentUnit</TokenIdentifier>
			<Abstract type="html">Returns the currently playing media unit.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (APSMediaUnit *)currentUnit</Declaration>
			
			<ReturnValue><Abstract type="html">An APSMediaUnit object representing the current unit.</Abstract></ReturnValue>
			<Anchor>//api/name/currentUnit</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/setCurrentURL:</TokenIdentifier>
			<Abstract type="html">Sets the video clip URL for the current media unit. The clip is processeed immmediately.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)setCurrentURL:(NSURL *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The URL of the video clip.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setCurrentURL:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/addOverlays:</TokenIdentifier>
			<Abstract type="html">Adds additional overlays to display over the current unit.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)addOverlays:(NSArray *)overlays</Declaration>
			<Parameters>
				<Parameter>
					<Name>overlays</Name>
					<Abstract type="html">Additional APSMediaOverlay objects to inject.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addOverlays:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/addEvents:</TokenIdentifier>
			<Abstract type="html">Adds additional events to the current unit&apos;s timeline.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)addEvents:(NSArray *)events</Declaration>
			<Parameters>
				<Parameter>
					<Name>overlays</Name>
					<Abstract type="html">Additional APSMediaEvent objects to inject.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addEvents:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/track:forEvent:type:</TokenIdentifier>
			<Abstract type="html">Sends tracking information to one or more servers. All specified URLs will be requested via GET. See &quot;Available Tracking Events&quot; for a list of supported event types.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)track:(id)urls forEvent:(NSString *)event type:(NSString *)type</Declaration>
			<Parameters>
				<Parameter>
					<Name>urls</Name>
					<Abstract type="html">An array of NSURL objects that should be pinged. Also accepts an array of NSString objects, a single NSURL or a single NSString.</Abstract>
				</Parameter><Parameter>
					<Name>event</Name>
					<Abstract type="html">A descriptive text of the events.</Abstract>
				</Parameter><Parameter>
					<Name>type</Name>
					<Abstract type="html">The tracked event type. See &quot;Available Tracking Events&quot;.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/track:forEvent:type:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/setActionDelegate:</TokenIdentifier>
			<Abstract type="html">The player&apos;s action delegate. Any intent to execute specific URLs as a result of user interaction will be notified to the delegate for action.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) id&lt;APSMediaPlayerActionDelegate&gt; actionDelegate</Declaration>
			
			
			<Anchor>//api/name/actionDelegate</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/actionDelegate</TokenIdentifier>
			<Abstract type="html">The player&apos;s action delegate. Any intent to execute specific URLs as a result of user interaction will be notified to the delegate for action.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) id&lt;APSMediaPlayerActionDelegate&gt; actionDelegate</Declaration>
			
			
			<Anchor>//api/name/actionDelegate</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSMediaPlayer/actionDelegate</TokenIdentifier>
			<Abstract type="html">The player&apos;s action delegate. Any intent to execute specific URLs as a result of user interaction will be notified to the delegate for action.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) id&lt;APSMediaPlayerActionDelegate&gt; actionDelegate</Declaration>
			
			
			<Anchor>//api/name/actionDelegate</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/setModalViewControllerRoot:</TokenIdentifier>
			<Abstract type="html">The view controller that will be used to present any modal views by the player.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) UIViewController *modalViewControllerRoot</Declaration>
			
			
			<Anchor>//api/name/modalViewControllerRoot</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/modalViewControllerRoot</TokenIdentifier>
			<Abstract type="html">The view controller that will be used to present any modal views by the player.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) UIViewController *modalViewControllerRoot</Declaration>
			
			
			<Anchor>//api/name/modalViewControllerRoot</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSMediaPlayer/modalViewControllerRoot</TokenIdentifier>
			<Abstract type="html">The view controller that will be used to present any modal views by the player.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) UIViewController *modalViewControllerRoot</Declaration>
			
			
			<Anchor>//api/name/modalViewControllerRoot</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/openURL:</TokenIdentifier>
			<Abstract type="html">Instructs the player that a new URL needs to be interpreted and executed. This method will first ask the actionDelegate to respond to the given URL. If the actionDelegate declines to respond and the URL has a web scheme (`http://&apos; or &apos;https://&apos;) then an in-app web browser window will be displayed modally.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)openURL:(NSURL *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The URL that needs to be loaded.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/openURL:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/openURL:from:</TokenIdentifier>
			<Abstract type="html">Instructs the player that a new URL needs to be interpreted and executed. This method also specifies the calling overlay controller, as it can define specific behavior for the player upon returning to the foreground after the playback interruption (see onWebviewDismiss in APSMediaPlayerOverlayController`.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)openURL:(NSURL *)url from:(APSMediaPlayerOverlayController *)overlayController</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The URL that needs to be loaded.</Abstract>
				</Parameter><Parameter>
					<Name>overlay</Name>
					<Abstract type="html">The calling overlay controller.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/openURL:from:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/setIsProcessing:</TokenIdentifier>
			<Abstract type="html">Returns a Boolean value specifing if the player is currently rendering a playlist of units (read-only).</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) BOOL isProcessing</Declaration>
			
			
			<Anchor>//api/name/isProcessing</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/isProcessing</TokenIdentifier>
			<Abstract type="html">Returns a Boolean value specifing if the player is currently rendering a playlist of units (read-only).</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) BOOL isProcessing</Declaration>
			
			
			<Anchor>//api/name/isProcessing</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSMediaPlayer/isProcessing</TokenIdentifier>
			<Abstract type="html">Returns a Boolean value specifing if the player is currently rendering a playlist of units (read-only).</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) BOOL isProcessing</Declaration>
			
			
			<Anchor>//api/name/isProcessing</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/play</TokenIdentifier>
			<Abstract type="html">Starts playback of the current unit.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)play</Declaration>
			
			
			<Anchor>//api/name/play</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/pause</TokenIdentifier>
			<Abstract type="html">Pauses playback of the current unit.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)pause</Declaration>
			
			
			<Anchor>//api/name/pause</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/stop</TokenIdentifier>
			<Abstract type="html">Stops playback of the current unit.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)stop</Declaration>
			
			
			<Anchor>//api/name/stop</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/skip</TokenIdentifier>
			<Abstract type="html">Proceeds to the next unit in the playlist and sends a skip event.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)skip</Declaration>
			
			
			<Anchor>//api/name/skip</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/next</TokenIdentifier>
			<Abstract type="html">Proceeds to the next unit in the playlist and sends an exit event.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)next</Declaration>
			
			
			<Anchor>//api/name/next</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/step</TokenIdentifier>
			<Abstract type="html">Proceeds to the next unit in the playlist.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)step</Declaration>
			
			
			<Anchor>//api/name/step</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/previous</TokenIdentifier>
			<Abstract type="html">Replays the most recently played unit in the current playlist that has the canReplay property set to YES. If no such units are found, the current unit is restarted.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)previous</Declaration>
			
			
			<Anchor>//api/name/previous</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/setOnFinish:</TokenIdentifier>
			<Abstract type="html">A block object that will get executed when a playlist of units is finished rendering by the player.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) APSMediaPlayerFinishBlock onFinish</Declaration>
			
			
			<Anchor>//api/name/onFinish</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/onFinish</TokenIdentifier>
			<Abstract type="html">A block object that will get executed when a playlist of units is finished rendering by the player.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) APSMediaPlayerFinishBlock onFinish</Declaration>
			
			
			<Anchor>//api/name/onFinish</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSMediaPlayer/onFinish</TokenIdentifier>
			<Abstract type="html">A block object that will get executed when a playlist of units is finished rendering by the player.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) APSMediaPlayerFinishBlock onFinish</Declaration>
			
			
			<Anchor>//api/name/onFinish</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/currentPlaybackTime</TokenIdentifier>
			<Abstract type="html">Returns the current playback time.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (NSTimeInterval)currentPlaybackTime</Declaration>
			
			<ReturnValue><Abstract type="html">The current playback time.</Abstract></ReturnValue>
			<Anchor>//api/name/currentPlaybackTime</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/setCurrentPlaybackTime:</TokenIdentifier>
			<Abstract type="html">Sets the current playback time.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)setCurrentPlaybackTime:(NSTimeInterval)playbackTime</Declaration>
			<Parameters>
				<Parameter>
					<Name>playbackTime</Name>
					<Abstract type="html">The playback time to be set.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setCurrentPlaybackTime:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/duration</TokenIdentifier>
			<Abstract type="html">Returns the current unit&apos;s video clip total duration.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (NSTimeInterval)duration</Declaration>
			
			<ReturnValue><Abstract type="html">The video total duration.</Abstract></ReturnValue>
			<Anchor>//api/name/duration</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/playableDuration</TokenIdentifier>
			<Abstract type="html">Returns the current unit&apos;s video clip playable duration (the time interval that has already buffered and is ready for playback).</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (NSTimeInterval)playableDuration</Declaration>
			
			<ReturnValue><Abstract type="html">The video playable duration.</Abstract></ReturnValue>
			<Anchor>//api/name/playableDuration</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/playbackState</TokenIdentifier>
			<Abstract type="html">Returns the current unit&apos;s playback state. See Apple&apos;s documentation for more details about MPMoviePlaybackState.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (MPMoviePlaybackState)playbackState</Declaration>
			
			<ReturnValue><Abstract type="html">The current playback state.</Abstract></ReturnValue>
			<Anchor>//api/name/playbackState</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/loadState</TokenIdentifier>
			<Abstract type="html">Returns the current unit&apos;s load state. See Apple&apos;s documentation for more details about MPMovieLoadState.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (MPMovieLoadState)loadState</Declaration>
			
			<ReturnValue><Abstract type="html">The current load state.</Abstract></ReturnValue>
			<Anchor>//api/name/loadState</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/movieSourceType</TokenIdentifier>
			<Abstract type="html">Returns the current unit&apos;s movie source type. See Apple&apos;s documentation for more details about MPMovieSourceType.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (MPMovieSourceType)movieSourceType</Declaration>
			
			<ReturnValue><Abstract type="html">The movie source type.</Abstract></ReturnValue>
			<Anchor>//api/name/movieSourceType</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/isStreamingLive</TokenIdentifier>
			<Abstract type="html">Returns YES if the player is currently rendering a live stream.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (BOOL)isStreamingLive</Declaration>
			
			<ReturnValue><Abstract type="html">YES if the player is currently rendering a live stream.</Abstract></ReturnValue>
			<Anchor>//api/name/isStreamingLive</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/timedMetadata</TokenIdentifier>
			<Abstract type="html">Obtains the most recent time-based metadata provided by the streamed movie.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (NSArray *)timedMetadata</Declaration>
			
			<ReturnValue><Abstract type="html">An array of the most recent MPTimedMetadata objects provided by the streamed movie. See Apple&apos;s documentation for more details about MPTimedMetadata.</Abstract></ReturnValue>
			<Anchor>//api/name/timedMetadata</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/thumbnailImageAtTime:</TokenIdentifier>
			<Abstract type="html">Returns a snapshot image of the current video, at the requested time interval in the playback.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (UIImage *)thumbnailImageAtTime:(NSTimeInterval)time</Declaration>
			<Parameters>
				<Parameter>
					<Name>time</Name>
					<Abstract type="html">The time when the thumbnail should be taken from the video.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The resulting thumbnail.</Abstract></ReturnValue>
			<Anchor>//api/name/thumbnailImageAtTime:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/setIsFullscreen:</TokenIdentifier>
			<Abstract type="html">Returns a Boolean value specifing if the player is currently in fullscreen (read-only).</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) BOOL isFullscreen</Declaration>
			
			
			<Anchor>//api/name/isFullscreen</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/isFullscreen</TokenIdentifier>
			<Abstract type="html">Returns a Boolean value specifing if the player is currently in fullscreen (read-only).</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) BOOL isFullscreen</Declaration>
			
			
			<Anchor>//api/name/isFullscreen</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSMediaPlayer/isFullscreen</TokenIdentifier>
			<Abstract type="html">Returns a Boolean value specifing if the player is currently in fullscreen (read-only).</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) BOOL isFullscreen</Declaration>
			
			
			<Anchor>//api/name/isFullscreen</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/toggleFullscreen</TokenIdentifier>
			<Abstract type="html">Toggle the current fullscreen status.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)toggleFullscreen</Declaration>
			
			
			<Anchor>//api/name/toggleFullscreen</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/enterFullscreen</TokenIdentifier>
			<Abstract type="html">Enter fullscreen mode.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)enterFullscreen</Declaration>
			
			
			<Anchor>//api/name/enterFullscreen</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/exitFullscreen</TokenIdentifier>
			<Abstract type="html">Exit fullscreen mode.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)exitFullscreen</Declaration>
			
			
			<Anchor>//api/name/exitFullscreen</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/registerOverlayController:</TokenIdentifier>
			<Abstract type="html">Registers a new overlay controller with the player.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)registerOverlayController:(Class&lt;APSMediaPlayerOverlayControllerProtocol&gt;)controllerClass</Declaration>
			<Parameters>
				<Parameter>
					<Name>controllerClass</Name>
					<Abstract type="html">The class of the new overlay controller.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/registerOverlayController:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/overlayControllerForType:</TokenIdentifier>
			<Abstract type="html">This method instantiates and returns a new object of the class registered for the given overlay type.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (NSObject&lt;APSMediaPlayerOverlayControllerProtocol&gt; *)overlayControllerForType:(NSString *)type</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">The type of controller required.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new object that implements APSMediaPlayerOverlayControllerProtocol or nil if no controllers are registered for the given type.</Abstract></ReturnValue>
			<Anchor>//api/name/overlayControllerForType:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/registerUnitManager:</TokenIdentifier>
			<Abstract type="html">Registers a new unit manager to dynamically handle media playback.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)registerUnitManager:(NSObject&lt;APSUnitManagerProtocol&gt; *)managerClass</Declaration>
			<Parameters>
				<Parameter>
					<Name>managerClass</Name>
					<Abstract type="html">The new unit manager object.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/registerUnitManager:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/showActivityIndicator</TokenIdentifier>
			<Abstract type="html">Shows an activity indicator, centrally in the player surface.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)showActivityIndicator</Declaration>
			
			
			<Anchor>//api/name/showActivityIndicator</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/hideActivityIndicator</TokenIdentifier>
			<Abstract type="html">Hides the player activity indicator.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)hideActivityIndicator</Declaration>
			
			
			<Anchor>//api/name/hideActivityIndicator</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/resetDisplayedOverlays</TokenIdentifier>
			<Abstract type="html">Resets all displayed overlays.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>- (void)resetDisplayedOverlays</Declaration>
			
			
			<Anchor>//api/name/resetDisplayedOverlays</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/APSMediaPlayer/durationFromString:</TokenIdentifier>
			<Abstract type="html">Parses a string format and returns a translated time interval in seconds.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>+ (NSTimeInterval)durationFromString:(NSString *)string</Declaration>
			<Parameters>
				<Parameter>
					<Name>string</Name>
					<Abstract type="html">The string format to be translated. Must be in the format @&quot;hh:mm:ss&quot;.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The translated time interval in seconds.</Abstract></ReturnValue>
			<Anchor>//api/name/durationFromString:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/setIgnoreSilentSwitch:</TokenIdentifier>
			<Abstract type="html">Specifies whether the player should ignore the device silent switch setting.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL ignoreSilentSwitch</Declaration>
			
			
			<Anchor>//api/name/ignoreSilentSwitch</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/ignoreSilentSwitch</TokenIdentifier>
			<Abstract type="html">Specifies whether the player should ignore the device silent switch setting.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL ignoreSilentSwitch</Declaration>
			
			
			<Anchor>//api/name/ignoreSilentSwitch</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSMediaPlayer/ignoreSilentSwitch</TokenIdentifier>
			<Abstract type="html">Specifies whether the player should ignore the device silent switch setting.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL ignoreSilentSwitch</Declaration>
			
			
			<Anchor>//api/name/ignoreSilentSwitch</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/setDetectBreachedDevice:</TokenIdentifier>
			<Abstract type="html">Specifies whether the player should stop functioning if the currently running device is detected to be jailbroken.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL detectBreachedDevice</Declaration>
			
			
			<Anchor>//api/name/detectBreachedDevice</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSMediaPlayer/detectBreachedDevice</TokenIdentifier>
			<Abstract type="html">Specifies whether the player should stop functioning if the currently running device is detected to be jailbroken.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL detectBreachedDevice</Declaration>
			
			
			<Anchor>//api/name/detectBreachedDevice</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSMediaPlayer/detectBreachedDevice</TokenIdentifier>
			<Abstract type="html">Specifies whether the player should stop functioning if the currently running device is detected to be jailbroken.</Abstract>
			<DeclaredIn>APSMediaPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL detectBreachedDevice</Declaration>
			
			
			<Anchor>//api/name/detectBreachedDevice</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
        
	</File>
</Tokens>