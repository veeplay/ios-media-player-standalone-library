<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/APSAVPlayer.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/APSAVPlayer</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
            
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/setView:</TokenIdentifier>
			<Abstract type="html">The container UIView of the player.</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) UIView *view</Declaration>
			
			
			<Anchor>//api/name/view</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/view</TokenIdentifier>
			<Abstract type="html">The container UIView of the player.</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) UIView *view</Declaration>
			
			
			<Anchor>//api/name/view</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSAVPlayer/view</TokenIdentifier>
			<Abstract type="html">The container UIView of the player.</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) UIView *view</Declaration>
			
			
			<Anchor>//api/name/view</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/setIsPreparedToPlay:</TokenIdentifier>
			<Abstract type="html">Returns a Boolean value specifing if the player is ready to play media</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) BOOL isPreparedToPlay</Declaration>
			
			
			<Anchor>//api/name/isPreparedToPlay</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/isPreparedToPlay</TokenIdentifier>
			<Abstract type="html">Returns a Boolean value specifing if the player is ready to play media</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) BOOL isPreparedToPlay</Declaration>
			
			
			<Anchor>//api/name/isPreparedToPlay</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSAVPlayer/isPreparedToPlay</TokenIdentifier>
			<Abstract type="html">Returns a Boolean value specifing if the player is ready to play media</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) BOOL isPreparedToPlay</Declaration>
			
			
			<Anchor>//api/name/isPreparedToPlay</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/setInitialPlaybackTime:</TokenIdentifier>
			<Abstract type="html">Get or set the initial time in stream from which the player will start playing the media</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSTimeInterval initialPlaybackTime</Declaration>
			
			
			<Anchor>//api/name/initialPlaybackTime</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/initialPlaybackTime</TokenIdentifier>
			<Abstract type="html">Get or set the initial time in stream from which the player will start playing the media</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSTimeInterval initialPlaybackTime</Declaration>
			
			
			<Anchor>//api/name/initialPlaybackTime</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSAVPlayer/initialPlaybackTime</TokenIdentifier>
			<Abstract type="html">Get or set the initial time in stream from which the player will start playing the media</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSTimeInterval initialPlaybackTime</Declaration>
			
			
			<Anchor>//api/name/initialPlaybackTime</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/setCurrentPlaybackTime:</TokenIdentifier>
			<Abstract type="html">Get or set the current position in stream</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSTimeInterval currentPlaybackTime</Declaration>
			
			
			<Anchor>//api/name/currentPlaybackTime</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/currentPlaybackTime</TokenIdentifier>
			<Abstract type="html">Get or set the current position in stream</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSTimeInterval currentPlaybackTime</Declaration>
			
			
			<Anchor>//api/name/currentPlaybackTime</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSAVPlayer/currentPlaybackTime</TokenIdentifier>
			<Abstract type="html">Get or set the current position in stream</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) NSTimeInterval currentPlaybackTime</Declaration>
			
			
			<Anchor>//api/name/currentPlaybackTime</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/setPlayableDuration:</TokenIdentifier>
			<Abstract type="html">Get the duration of the buffered content</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSTimeInterval playableDuration</Declaration>
			
			
			<Anchor>//api/name/playableDuration</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/playableDuration</TokenIdentifier>
			<Abstract type="html">Get the duration of the buffered content</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSTimeInterval playableDuration</Declaration>
			
			
			<Anchor>//api/name/playableDuration</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSAVPlayer/playableDuration</TokenIdentifier>
			<Abstract type="html">Get the duration of the buffered content</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSTimeInterval playableDuration</Declaration>
			
			
			<Anchor>//api/name/playableDuration</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/setDuration:</TokenIdentifier>
			<Abstract type="html">Get the total duration of the video</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSTimeInterval duration</Declaration>
			
			
			<Anchor>//api/name/duration</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/duration</TokenIdentifier>
			<Abstract type="html">Get the total duration of the video</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSTimeInterval duration</Declaration>
			
			
			<Anchor>//api/name/duration</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSAVPlayer/duration</TokenIdentifier>
			<Abstract type="html">Get the total duration of the video</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSTimeInterval duration</Declaration>
			
			
			<Anchor>//api/name/duration</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/setCurrentPlaybackRate:</TokenIdentifier>
			<Abstract type="html">Get or set the current playback rate</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) float currentPlaybackRate</Declaration>
			
			
			<Anchor>//api/name/currentPlaybackRate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/currentPlaybackRate</TokenIdentifier>
			<Abstract type="html">Get or set the current playback rate</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) float currentPlaybackRate</Declaration>
			
			
			<Anchor>//api/name/currentPlaybackRate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSAVPlayer/currentPlaybackRate</TokenIdentifier>
			<Abstract type="html">Get or set the current playback rate</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) float currentPlaybackRate</Declaration>
			
			
			<Anchor>//api/name/currentPlaybackRate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/setContentURL:</TokenIdentifier>
			<Abstract type="html">Get or set the current media&apos;s URL</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSURL *contentURL</Declaration>
			
			
			<Anchor>//api/name/contentURL</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/contentURL</TokenIdentifier>
			<Abstract type="html">Get or set the current media&apos;s URL</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSURL *contentURL</Declaration>
			
			
			<Anchor>//api/name/contentURL</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSAVPlayer/contentURL</TokenIdentifier>
			<Abstract type="html">Get or set the current media&apos;s URL</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSURL *contentURL</Declaration>
			
			
			<Anchor>//api/name/contentURL</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/setScalingMode:</TokenIdentifier>
			<Abstract type="html">Get or set the scaling mode of the video according to its viewport</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) MPMovieScalingMode scalingMode</Declaration>
			
			
			<Anchor>//api/name/scalingMode</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/scalingMode</TokenIdentifier>
			<Abstract type="html">Get or set the scaling mode of the video according to its viewport</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) MPMovieScalingMode scalingMode</Declaration>
			
			
			<Anchor>//api/name/scalingMode</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSAVPlayer/scalingMode</TokenIdentifier>
			<Abstract type="html">Get or set the scaling mode of the video according to its viewport</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) MPMovieScalingMode scalingMode</Declaration>
			
			
			<Anchor>//api/name/scalingMode</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/setShouldAutoplay:</TokenIdentifier>
			<Abstract type="html">Get or set if the player should autoplay an URL as soon as it is provided</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) BOOL shouldAutoplay</Declaration>
			
			
			<Anchor>//api/name/shouldAutoplay</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/shouldAutoplay</TokenIdentifier>
			<Abstract type="html">Get or set if the player should autoplay an URL as soon as it is provided</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) BOOL shouldAutoplay</Declaration>
			
			
			<Anchor>//api/name/shouldAutoplay</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSAVPlayer/shouldAutoplay</TokenIdentifier>
			<Abstract type="html">Get or set if the player should autoplay an URL as soon as it is provided</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) BOOL shouldAutoplay</Declaration>
			
			
			<Anchor>//api/name/shouldAutoplay</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/setPlaybackState:</TokenIdentifier>
			<Abstract type="html">Get the current playback state</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) MPMoviePlaybackState playbackState</Declaration>
			
			
			<Anchor>//api/name/playbackState</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/playbackState</TokenIdentifier>
			<Abstract type="html">Get the current playback state</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) MPMoviePlaybackState playbackState</Declaration>
			
			
			<Anchor>//api/name/playbackState</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSAVPlayer/playbackState</TokenIdentifier>
			<Abstract type="html">Get the current playback state</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) MPMoviePlaybackState playbackState</Declaration>
			
			
			<Anchor>//api/name/playbackState</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/setLoadState:</TokenIdentifier>
			<Abstract type="html">Get the current state of the buffer</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) MPMovieLoadState loadState</Declaration>
			
			
			<Anchor>//api/name/loadState</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/loadState</TokenIdentifier>
			<Abstract type="html">Get the current state of the buffer</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) MPMovieLoadState loadState</Declaration>
			
			
			<Anchor>//api/name/loadState</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSAVPlayer/loadState</TokenIdentifier>
			<Abstract type="html">Get the current state of the buffer</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) MPMovieLoadState loadState</Declaration>
			
			
			<Anchor>//api/name/loadState</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/setMovieSourceType:</TokenIdentifier>
			<Abstract type="html">Get the current media&apos;s source type (e.g. file or stream)</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) MPMovieSourceType movieSourceType</Declaration>
			
			
			<Anchor>//api/name/movieSourceType</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/movieSourceType</TokenIdentifier>
			<Abstract type="html">Get the current media&apos;s source type (e.g. file or stream)</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) MPMovieSourceType movieSourceType</Declaration>
			
			
			<Anchor>//api/name/movieSourceType</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSAVPlayer/movieSourceType</TokenIdentifier>
			<Abstract type="html">Get the current media&apos;s source type (e.g. file or stream)</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) MPMovieSourceType movieSourceType</Declaration>
			
			
			<Anchor>//api/name/movieSourceType</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/setControlStyle:</TokenIdentifier>
			<Abstract type="html">Set how the player controls will appear</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) MPMovieControlStyle controlStyle</Declaration>
			
			
			<Anchor>//api/name/controlStyle</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/controlStyle</TokenIdentifier>
			<Abstract type="html">Set how the player controls will appear</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) MPMovieControlStyle controlStyle</Declaration>
			
			
			<Anchor>//api/name/controlStyle</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSAVPlayer/controlStyle</TokenIdentifier>
			<Abstract type="html">Set how the player controls will appear</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) MPMovieControlStyle controlStyle</Declaration>
			
			
			<Anchor>//api/name/controlStyle</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/setTimedMetadata:</TokenIdentifier>
			<Abstract type="html">Obtains the most recent time-based metadata provided by the streamed movie.</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *timedMetadata</Declaration>
			
			
			<Anchor>//api/name/timedMetadata</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/timedMetadata</TokenIdentifier>
			<Abstract type="html">Obtains the most recent time-based metadata provided by the streamed movie.</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *timedMetadata</Declaration>
			
			
			<Anchor>//api/name/timedMetadata</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSAVPlayer/timedMetadata</TokenIdentifier>
			<Abstract type="html">Obtains the most recent time-based metadata provided by the streamed movie.</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *timedMetadata</Declaration>
			
			
			<Anchor>//api/name/timedMetadata</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/setAllowsAirPlay:</TokenIdentifier>
			<Abstract type="html">Specifies whether the movie player allows AirPlay movie playback.</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) BOOL allowsAirPlay</Declaration>
			
			
			<Anchor>//api/name/allowsAirPlay</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/allowsAirPlay</TokenIdentifier>
			<Abstract type="html">Specifies whether the movie player allows AirPlay movie playback.</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) BOOL allowsAirPlay</Declaration>
			
			
			<Anchor>//api/name/allowsAirPlay</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSAVPlayer/allowsAirPlay</TokenIdentifier>
			<Abstract type="html">Specifies whether the movie player allows AirPlay movie playback.</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) BOOL allowsAirPlay</Declaration>
			
			
			<Anchor>//api/name/allowsAirPlay</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/setAirPlayVideoActive:</TokenIdentifier>
			<Abstract type="html">Check out if AirPlay video is started or stopped.</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) BOOL airPlayVideoActive</Declaration>
			
			
			<Anchor>//api/name/airPlayVideoActive</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/airPlayVideoActive</TokenIdentifier>
			<Abstract type="html">Check out if AirPlay video is started or stopped.</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) BOOL airPlayVideoActive</Declaration>
			
			
			<Anchor>//api/name/airPlayVideoActive</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/APSAVPlayer/airPlayVideoActive</TokenIdentifier>
			<Abstract type="html">Check out if AirPlay video is started or stopped.</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) BOOL airPlayVideoActive</Declaration>
			
			
			<Anchor>//api/name/airPlayVideoActive</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/initWithURLs:</TokenIdentifier>
			<Abstract type="html">Create a APSAVPlayer instance</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>- (id)initWithURLs:(NSArray *)urls</Declaration>
			<Parameters>
				<Parameter>
					<Name>urls</Name>
					<Abstract type="html">A NSArray of NSURLs pointing to the media location</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The APSAVPlayer instance</Abstract></ReturnValue>
			<Anchor>//api/name/initWithURLs:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/appendURL:</TokenIdentifier>
			<Abstract type="html">Add an URL to the current play queue</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>- (void)appendURL:(NSURL *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">A NSURL instance pointing to the media location</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/appendURL:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/prepareToPlay</TokenIdentifier>
			<Abstract type="html">Prepare to play media. This is also automatically called on play</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>- (void)prepareToPlay</Declaration>
			
			
			<Anchor>//api/name/prepareToPlay</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/play</TokenIdentifier>
			<Abstract type="html">Play the current media in the queue</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>- (void)play</Declaration>
			
			
			<Anchor>//api/name/play</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/pause</TokenIdentifier>
			<Abstract type="html">Pause the current playing media</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>- (void)pause</Declaration>
			
			
			<Anchor>//api/name/pause</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/stop</TokenIdentifier>
			<Abstract type="html">Stop the player, remove all the items from the queue and remove the player&apos;s CALayer from its superlayer</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>- (void)stop</Declaration>
			
			
			<Anchor>//api/name/stop</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/beginSeekingForward</TokenIdentifier>
			<Abstract type="html">Play the media with an increased playback rate (speed)</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>- (void)beginSeekingForward</Declaration>
			
			
			<Anchor>//api/name/beginSeekingForward</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/beginSeekingBackward</TokenIdentifier>
			<Abstract type="html">Rewind the media</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>- (void)beginSeekingBackward</Declaration>
			
			
			<Anchor>//api/name/beginSeekingBackward</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/endSeeking</TokenIdentifier>
			<Abstract type="html">Stop the seeking process startd by beginSeekingForward or beginSeekingBackward;</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>- (void)endSeeking</Declaration>
			
			
			<Anchor>//api/name/endSeeking</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/streamSourceType</TokenIdentifier>
			<Abstract type="html">Get the stream&apos;s source type. Different by movieSourceType because it returns if the stream is
a VOD stream or a live stream.</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>- (APSMoviePlayerSourceType)streamSourceType</Declaration>
			
			<ReturnValue><Abstract type="html">The stream&apos;s type as a APSMoviePlayerSourceType enum</Abstract></ReturnValue>
			<Anchor>//api/name/streamSourceType</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/thumbnailAt:</TokenIdentifier>
			<Abstract type="html">Request a thumbnail image</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>- (UIImage *)thumbnailAt:(NSTimeInterval)playbackTime</Declaration>
			<Parameters>
				<Parameter>
					<Name>playbackTime</Name>
					<Abstract type="html">The time, in seconds, when the thumbnail should be taken from the video</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The thumbnail image</Abstract></ReturnValue>
			<Anchor>//api/name/thumbnailAt:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/thumbnailImageAtTime:timeOption:</TokenIdentifier>
			<Abstract type="html">Request a thumbnail image</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>- (UIImage *)thumbnailImageAtTime:(NSTimeInterval)playbackTime timeOption:(MPMovieTimeOption)option</Declaration>
			<Parameters>
				<Parameter>
					<Name>playbackTime</Name>
					<Abstract type="html">The time, in seconds, when the thumbnail should be taken from the video</Abstract>
				</Parameter><Parameter>
					<Name>option</Name>
					<Abstract type="html">Precision</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The thumbnail image</Abstract></ReturnValue>
			<Anchor>//api/name/thumbnailImageAtTime:timeOption:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/APSAVPlayer/requestThumbnailImagesAtTimes:timeOption:</TokenIdentifier>
			<Abstract type="html">Request a thumbnail image</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>- (void)requestThumbnailImagesAtTimes:(NSArray *)playbackTimes timeOption:(MPMovieTimeOption)option</Declaration>
			<Parameters>
				<Parameter>
					<Name>playbackTimes</Name>
					<Abstract type="html">A NSArray of NSTimeInterval, in seconds, when the thumbnail should be taken from the video</Abstract>
				</Parameter><Parameter>
					<Name>option</Name>
					<Abstract type="html">Precision</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The thumbnail image</Abstract></ReturnValue>
			<Anchor>//api/name/requestThumbnailImagesAtTimes:timeOption:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/APSAVPlayer/backendPriority</TokenIdentifier>
			<Abstract type="html">The priority based on which the backend will be selected</Abstract>
			<DeclaredIn>APSAVPlayer.h</DeclaredIn>
			
			<Declaration>+ (NSInteger)backendPriority</Declaration>
			
			
			<Anchor>//api/name/backendPriority</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
        
	</File>
</Tokens>